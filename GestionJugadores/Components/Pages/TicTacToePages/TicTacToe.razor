@page "/gameBoard"
@inject IPartidasApiService partidasApiService
@inject IMovimientosApiService movimientosApiService
@rendermode InteractiveServer

<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">
    <div class="game-container">
        @if (!gameStarted)
        {
            <div class="container-fluid py-5">
                <h4> <strong> Unirse a Partida Existente </strong> </h4>
                <div class="form-group">
                    <label for="partidaId"> <strong> ID de la Partida </strong></label>
                    <div class="input-group">
                        <input id="partidaId" type="number" class="form-control" @bind="PartidaId" placeholder="ID de la partida" />
                        <button class="btn btn-outline-secondary bi bi-search" type="button" @onclick="OpenPartidasModal"> </button>
                    </div>
                </div>
                <button class="btn btn-warning btn-lg mt-2"
                disabled="@(PartidaId == 0)"
                @onclick="JoinGame">
                    Unirse a Partida
                </button>

                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
            </div>
        }
        else
        {
            <div class="game-screen">
                <h2>Partida: @PartidaId</h2>

                @if (winner != null)
                {
                    <div class="alert alert-success mt-3">
                        @EstadoJuego
                    </div>
                }
                else if (esEmpate)
                {
                    <div class="alert alert-warning mt-3">
                        @EstadoJuego
                    </div>
                }
                else if (PuedeJugar())
                {
                    <div class="alert alert-primary mt-3">
                        @EstadoJuego
                    </div>
                }
                else
                {
                    <div class="alert alert-info mt-3">
                        @EstadoJuego
                    </div>
                }

                <div class="game-board">
                    @for (var i = 0; i < 9; i++)
                    {
                        var cellIndex = i; // Copia local para evitar problemas con el closure en el lambda
                        <button class="cell @GetPlayerClass(board[cellIndex])"
                        @onclick="() => HandleCellClick(cellIndex)"
                        disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                            @board[cellIndex]?.ToString()
                        </button>
                    }
                </div>

                <div class="mt-4">
                    <button class="btn btn-info me-2" @onclick="RefreshGameState" disabled="@refreshing">
                        @if (refreshing)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Refrescando...</span>
                        }
                        else
                        {
                            <span>🔄 Refrescar Estado</span>
                        }
                    </button>

                    <button class="btn btn-secondary bi bi-arrow-left-circle" @onclick="LeaveGame"> Abandonar partida </button>
                </div>
            </div>
        }
    </div>
</div>

<PartidasModal IsOpen="showModal"
IsOpenChanged="(value) => showModal = value"
OnPartidaSelected="HandlePartidaSelected" />

@code {
    private Guid CurrentSession { get; set; }
    public bool gameStarted { get; set; }
    public PlayerType? playerTypeSelection { get; set; }
    public PlayerType _currentPlayerType { get; set; }
    public PlayerType? winner { get; set; }
    public bool esEmpate { get; set; }
    public PlayerType?[] board { get; set; } = new PlayerType?[9];

    public enum PlayerType { X, O }
    public int Jugador1Id { get; set; }
    public int? Jugador2Id { get; set; }
    public int PartidaId { get; set; }
    public int MiJugadorId { get; set; }

    public string? errorMessage { get; set; }
    public bool refreshing = false;
    public bool showModal = false;

    private string MiSimbolo => MiJugadorId == Jugador1Id ? "X" : "O";

    private Timer? temporizador;
    private bool refrescadoHabilitado = false;

    private static Dictionary<int, Dictionary<Guid, int>> partidaSesiones = new Dictionary<int, Dictionary<Guid, int>>();

    private string EstadoJuego
    {
        get
        {
            if (winner != null)
            {
                return $"🏆 ¡Ganador: {winner}!";
            }
            if (esEmpate)
            {
                return "🤝 ¡Es un empate!";
            }

            var turno = _currentPlayerType.ToString();
            var esMiTurno = PuedeJugar();

            if (esMiTurno)
            {
                return $"🎮 ¡Tu turno! (Juegas con {MiSimbolo})";
            }

            // Si NO es mi turno
            return $"⏳ Esperando turno del jugador {_currentPlayerType}...";
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CurrentSession = Guid.NewGuid();
    }

    private async Task JoinGame()
    {
        if (PartidaId <= 0)
        {
            errorMessage = "Por favor, ingrese el ID de la partida";
            return;
        }

        var response = await partidasApiService.GetPartidaAsync(PartidaId);

        if (response is Resource<PartidaResponse>.Error error)
        {
            errorMessage = $"Error al unirse a la partida: {error.Message}";
            return;
        }

        var partida = response.Data;
        Jugador1Id = partida.Jugador1Id;
        Jugador2Id = partida.Jugador2Id;

        // Verificar que la partida tenga ambos jugadores asignados
        if (Jugador2Id == null || Jugador2Id == 0)
        {
            errorMessage = "Esta partida aún no tiene 2 jugadores asignados en el servidor.";
            return;
        }

        // Asignar jugador según sesiones existentes en esta partida
        if (!partidaSesiones.ContainsKey(PartidaId))
        {
            partidaSesiones[PartidaId] = new Dictionary<Guid, int>();
        }

        // Si esta sesión ya jugó en esta partida, recuperar su jugador
        if (partidaSesiones[PartidaId].ContainsKey(CurrentSession))
        {
            MiJugadorId = partidaSesiones[PartidaId][CurrentSession];
        }
        else
        {
            // Asignar jugador disponible (el que no ha sido tomado por otra sesión)
            var jugadoresOcupados = partidaSesiones[PartidaId].Values.ToList();

            if (!jugadoresOcupados.Contains(Jugador1Id))
            {
                MiJugadorId = Jugador1Id;
            }
            else if (!jugadoresOcupados.Contains(Jugador2Id.Value))
            {
                MiJugadorId = Jugador2Id.Value;
            }
            else
            {
                errorMessage = "Esta partida ya tiene 2 jugadores activos. No puedes unirte.";
                return;
            }

            // Registrar esta sesión con su jugador
            partidaSesiones[PartidaId][CurrentSession] = MiJugadorId;
        }

        gameStarted = true;
        await RefreshGameState();
        StartPolling();
    }

    private async Task HandleCellClick(int index)
    {
        if (!PuedeJugar())
        {
            errorMessage = "¡Respete el turno de su rival!";
            return;
        }

        if (board[index] != null || winner != null || esEmpate)
        {
            return;
        }

        board[index] = _currentPlayerType;

        int fila = index / 3;
        int columna = index % 3;

        var jugador = _currentPlayerType == PlayerType.X ? "X" : "O";
        var response = await movimientosApiService.PostMovimiento(PartidaId, jugador, fila, columna);

        if (response is Resource<MovimientoResponse>.Error error)
        {
            errorMessage = $"Error al registrar movimiento: {error.Message}";
            return;
        }

        winner = CheckForWinner();
        if (winner != null)
        {
            StopPolling();
            return; // Juego terminado.
        }

        esEmpate = board.All(cell => cell != null);
        if (esEmpate)
        {
            StopPolling();
            return; // Juego terminado.
        }

        _currentPlayerType = (_currentPlayerType == PlayerType.X)
            ? PlayerType.O
            : PlayerType.X;
    }

    private async Task RefreshGameState()
    {
        refreshing = true;

        var response = await movimientosApiService.GetMovimientosByPartidaAsync(PartidaId);
        if (response is Resource<List<MovimientoResponse>>.Success success)
        {
            var movimientos = success.Data;

            board = new PlayerType?[9];
            foreach (var move in movimientos)
            {
                int index = move.PosicionFila * 3 + move.PosicionColumna;
                board[index] = move.Jugador == "X"
                                ? PlayerType.X
                                : PlayerType.O;
            }

            _currentPlayerType = movimientos.Count % 2 == 0 ? PlayerType.X : PlayerType.O;

            winner = CheckForWinner();
            if (winner != null)
            {
                StopPolling();
            }
            else
            {
                esEmpate = board.All(cell => cell != null);
                if (esEmpate)
                {
                    StopPolling();
                }
            }

            StateHasChanged();
        }

        refreshing = false;
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
             new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},// Horizontales
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},// Verticales
             new[] {0, 4, 8}, new[] {2, 4, 6}// Diagonales
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
            {
                return board[a];
            }
        }

        return null; // No hay ganador
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }

    private bool PuedeJugar()
    {
        if (_currentPlayerType == PlayerType.X && MiJugadorId == Jugador1Id)
        {
            return true;
        }

        if (_currentPlayerType == PlayerType.O && MiJugadorId == Jugador2Id)
        {
            return true;
        }

        return false;
    }

    private void LeaveGame()
    {
        StopPolling();
        gameStarted = false;
        PartidaId = 0;
        Jugador1Id = 0;
        Jugador2Id = 0;
        MiJugadorId = 0;
        playerTypeSelection = null;
        board = new PlayerType?[9];
        errorMessage = null;
        winner = null;
        esEmpate = false;
    }

    private void OpenPartidasModal()
    {
        showModal = true;
    }

    private void HandlePartidaSelected(int partidaId)
    {
        PartidaId = partidaId;
    }

    private void StartPolling()
    {
        refrescadoHabilitado = true;
        temporizador = new Timer(async _ =>
        {
            if (gameStarted && winner == null && !esEmpate)
            {
                await InvokeAsync(async () =>
                {
                    await RefreshGameState();
                    StateHasChanged();
                });
            }
        }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
    }

    private void StopPolling()
    {
        refrescadoHabilitado = false;
        temporizador?.Dispose();
        temporizador = null;
    }

    public void Dispose()
    {
        StopPolling();
    }
}