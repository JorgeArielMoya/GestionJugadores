@page "/TicTac/Index"

@inject JugadoresService jugadoresService
@inject PartidasService partidasService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">

    <div class="game-container">
        @if (!gameStarted)
        {
            <!-- PANTALLA DE SELECCIÓN DE JUGADOR -->
            <div class="selection-screen">
                <h1>Elige tu jugador</h1>
                <div class="player-buttons">
                    <button class="btn @(playerTypeSelection == PlayerType.X ? "btn-primary" : "btn-outline-primary")"
                    @onclick="() => SelectPlayerType(PlayerType.X)">
                        Jugador X
                    </button>
                    <button class="btn @(playerTypeSelection == PlayerType.O ? "btn-info" : "btn-outline-info")"
                    @onclick="() => SelectPlayerType(PlayerType.O)">
                        Jugador O
                    </button>

                </div>
                <button class="btn btn-success btn-lg mt-4"
                disabled="@(playerTypeSelection == null)"
                @onclick="StartGame">
                    Iniciar Partida
                </button>
            </div>
        }
    </div>
</div>
@code {
    private enum PlayerType { X, O }

    private bool gameStarted;
    private PlayerType? playerTypeSelection;
    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType _currentPlayerType = PlayerType.X;
    private PlayerType? winner;
    private bool esEmpate;


    private void SelectPlayerType(PlayerType playerType)
    {
        playerTypeSelection = playerType;
        StateHasChanged();
    }

    private void SelectPlayerX()
    {
        playerTypeSelection = PlayerType.X;
    }

    private void StartGame()
    {
        if (playerTypeSelection.HasValue)
        {
            navigationManager.NavigateTo("/TicTac/Board");
        }
    }

    private void HandleCellClick(int index)
    {
        // Ignorar si la celda está ocupada o el juego terminó
        if (board[index] != null || winner != null || esEmpate)
        {
            return;
        }

        board[index] = _currentPlayerType;

        winner = CheckForWinner();
        if (winner != null)
        {
            return; // El juego termina
        }

        // Comprobar empate
        esEmpate = board.All(cell => cell != null);
        if (esEmpate)
        {
            return; // El juego termina
        }

        // Cambiar turno
        _currentPlayerType = (_currentPlayerType == PlayerType.X) 
            ? PlayerType.O 
            : PlayerType.X;
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
             new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},// Horizontales
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},// Verticales
             new[] {0, 4, 8}, new[] {2, 4, 6}// Diagonales
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
            {
                return board[a];
            }
        }

        return null; // No hay ganador
    }

    private void RestartGame()
    {
        gameStarted = false;
        playerTypeSelection = null;
        board = new PlayerType?[9];
        _currentPlayerType = PlayerType.X;
        winner = null;
        esEmpate = false;
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }
}