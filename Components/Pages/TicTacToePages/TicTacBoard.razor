@page "/TicTac/Board/{PartidaId:int}"

@inject JugadoresService jugadoresService
@inject PartidasService partidasService
@inject MovimientosService movimientosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle> Board </PageTitle>
<!-- PANTALLA DE JUEGO -->
<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">
    <div class="game-container">
        <div class="game-screen">
            <h2 class="game-status">@GameStatus</h2>

            <div class="game-board">
                @for (var i = 0; i < 9; i++)
                {
                    var cellIndex = i; // Copia local para evitar problemas con el closure en el lambda
                    <button class="cell @GetPlayerClass(board[cellIndex])"
                    @onclick="() => HandleCellClick(cellIndex)"
                    disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                        @board[cellIndex]?.ToString()
                    </button>
                }
            </div>

            <button class="btn btn-secondary mt-4" @onclick="RestartGame">
                Reiniciar Juego
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int PartidaId { get; set; }

    private enum PlayerType { X, O }

    private bool gameStarted;
    private PlayerType? playerTypeSelection;
    private PlayerType _currentPlayerType = PlayerType.X;
    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType? winner;
    private bool esEmpate;

    private string? jugadorXNombre { get; set; }
    private string? jugadorONombre { get; set; }
    private Partidas? PartidaActual;

    protected override async Task OnInitializedAsync ()
    {
        PartidaActual = await partidasService.Buscar(PartidaId);

        if (PartidaActual != null)
        {
            var jugadorX = await jugadoresService.Buscar(PartidaActual.Jugador1Id);
            var jugadorO = await jugadoresService.Buscar(PartidaActual.Jugador2Id ?? 0);

            jugadorXNombre = jugadorX?.Nombres ?? "Jugador X";
            jugadorONombre = jugadorO?.Nombres ?? "Jugador O";
        }

        StateHasChanged();
    }

    private string GameStatus
    {
        get
        {
            if (winner != null)
            {
                var ganadorNombre = winner == PlayerType.X ? jugadorXNombre : jugadorONombre;
                return $"🏆 ¡Ganador: {ganadorNombre}!";
            }

            if (esEmpate)
            {
                return "🤝 ¡Es un empate!";
            }

            // Mostrar nombre del jugador actual en el turno
            var jugadorActual = _currentPlayerType == PlayerType.X ? jugadorXNombre : jugadorONombre;
            return $"Turno de: {jugadorActual} ({_currentPlayerType})";
        }
    }

    private async Task HandleCellClick(int index)
    {
        if (board[index] != null || winner != null || esEmpate) 
        {
            return;
        }

        board[index] = _currentPlayerType;

        var partida = await partidasService.Buscar(PartidaId);

        if (partida != null)
        {
            var jugadorId = (_currentPlayerType == PlayerType.X)
            ? partida.Jugador1Id
            : partida.Jugador2Id ?? 0;

            var movimiento = new Movimientos()
            {
                PartidaId = PartidaId,
                JugadorId = jugadorId, 
                PosicionFila = index / 3, 
                PosicionColumna = index % 3, 
                FechaMovimiento = DateTime.Now
            };

            await movimientosService.Guardar(movimiento);
        }

        winner = CheckForWinner();

        if (winner != null)
        {
            await FinalizarPartida(winner.Value);
            StateHasChanged();
            return;
        }

        esEmpate = board.All(cell => cell != null);

        if (esEmpate)
        {
            await FinalizarPartida(null);
            StateHasChanged();
            return;
        }

        _currentPlayerType = (_currentPlayerType == PlayerType.X) ? PlayerType.O : PlayerType.X;
        StateHasChanged();
    }

    private async Task FinalizarPartida(PlayerType? ganador)
    {
        var partida = await partidasService.Buscar(PartidaId);

        if (partida == null) 
        {
            return;
        }

        partida.EstadoPartida = "Finalizada";
        partida.FechaFin = DateTime.UtcNow;
        partida.EstadoTablero = string.Join("", board.Select(c => c?.ToString() ?? "-"));

        if (ganador.HasValue)
        {
            partida.GanadorId = (ganador.Value == PlayerType.X) ? partida.Jugador1Id : partida.Jugador2Id;

            // Actualizar estadísticas del ganador
            var ganadorJugador = await jugadoresService.Buscar(partida.GanadorId.Value);
            if (ganadorJugador != null)
            {
                ganadorJugador.Victorias++;
                await jugadoresService.Guardar(ganadorJugador);
            }

            // Actualizar estadísticas del perdedor
            var perdedorId = (ganador.Value == PlayerType.X) ? partida.Jugador2Id : partida.Jugador1Id;
            if (perdedorId.HasValue)
            {
                var perdedorJugador = await jugadoresService.Buscar(perdedorId.Value);
                if (perdedorJugador != null)
                {
                    perdedorJugador.Derrotas++;
                    await jugadoresService.Guardar(perdedorJugador);
                }
            }
        }
        else
        {
            // Empate
            partida.GanadorId = null;

            var jugador1 = await jugadoresService.Buscar(partida.Jugador1Id);
            var jugador2 = await jugadoresService.Buscar(partida.Jugador2Id!.Value);

            if (jugador1 != null)
            {
                jugador1.Empates++;
                await jugadoresService.Guardar(jugador1);
            }

            if (jugador2 != null)
            {
                jugador2.Empates++;
                await jugadoresService.Guardar(jugador2);
            }
        }

        await partidasService.Guardar(partida); // Entraria a modificar
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
             new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},// Horizontales
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},// Verticales
             new[] {0, 4, 8}, new[] {2, 4, 6}// Diagonales
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
            {
                return board[a];
            }
        }

        return null; // No hay ganador
    }

    private void RestartGame()
    {
        gameStarted = false;
        playerTypeSelection = null;
        board = new PlayerType?[9];
        _currentPlayerType = PlayerType.X;
        winner = null;
        esEmpate = false;
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }
}
