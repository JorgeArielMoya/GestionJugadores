@page "/Partidas/Edit/{PartidaId:int}"

@inject JugadoresService jugadoresService
@inject PartidasService partidasService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle> Editar Partida </PageTitle>

@if (Partida != null)
{
	<div class="container"> 
		<div class="card shadow-lg">
			<div class="card-header text-center text-white bg-info ">
				<h5> <strong> Editar Partida </strong> </h5>
			</div>

			<div class="card-body">
				<EditForm Model = "Partida" OnValidSubmit="EditarPartida"> 
					<DataAnnotationsValidator/>

					<div class="row">
						<div class="col-3">
							<label class="form-label mt-2" for="Jugador1Id"> <strong> Jugador 1ID:</strong> </label>
							<InputSelect class="form-control form-select" @bind-Value="Partida.Jugador1Id">
								<option> Seleccione un Jugador </option>
								@foreach (var jugador in ListaJugadores)
								{
									@if (jugador.JugadorId != Partida.Jugador2Id)
									{
										<option value="@jugador.JugadorId"> @jugador.Nombres</option>
									}
								}
							</InputSelect>
						</div>
					</div>

					<div class="row">
						<div class="col-3">
							<label class="form-label mt-2" for="Jugador2Id"> <strong> Jugador 2ID:</strong> </label>
							<InputSelect class="form-control form-select" @bind-Value="Partida.Jugador2Id">
								<option> Seleccione un jugador </option>
								@foreach (var jugador in ListaJugadores)
								{
									@if (jugador.JugadorId != Partida.Jugador1Id)
									{
										<option value="@jugador.JugadorId"> @jugador.Nombres</option>
									}
								}
							</InputSelect>
						</div>
					</div>

					<div class="row">
						<div class="col-5">
							<label class="form-label mt-2" for="EstadoPartida"><strong> Estado Partida (Pendiente | En progreso | Finalizada): </strong></label>
							<InputText id="EstadoPartida" class="form-control" @bind-Value="Partida.EstadoPartida" onblur="@(async () => await EstadoEsValido())"> </InputText>
							<ValidationMessage For="() => Partida.EstadoPartida"></ValidationMessage>
						</div>
					</div>

					@if (!estadoValido)
					{
						<div class="text-danger"> Estado de partida no valido </div>
					}

					<div class="row">
						<div class="col-3">
							<label class="form-label mt-2" for="GanadorId"> <strong> Ganador Id:</strong> </label>
							<InputSelect class="form-control form-select" @bind-Value="Partida.GanadorId" onblur="@(async () => await SePuedeGanar())">
								<option> Seleccione un jugador </option>
								@foreach (var jugador in ListaJugadores)
								{
									@if ((jugador.JugadorId == Partida.Jugador1Id || jugador.JugadorId == Partida.Jugador2Id) && puedePonerGanador)
									{
										<option value="@jugador.JugadorId"> @jugador.Nombres</option>
									}
								}
							</InputSelect>
						</div>
					</div>

					<div class="row">
						<div class="col-3">
							<label class="form-label mt-2" for="TurnoJugador"> <strong> Turno Jugador: </strong> </label>
							<InputSelect class="form-control form-select" @bind-Value="Partida.TurnoJugadorId">
								<option> Seleccione un jugador </option>
								@foreach (var jugador in ListaJugadores)
								{
									if (jugador.JugadorId == Partida.Jugador1Id || jugador.JugadorId == Partida.Jugador2Id)
									{
										<option value="@jugador.JugadorId"> @jugador.Nombres</option>
									}
								}
							</InputSelect>
						</div>
					</div>

					<div class="row">
						<div class="col-3">
							<label class="form-label mt-2" for="FechaInicio"><strong> Fecha Inicio: </strong></label>
							<InputDate id="FechaInicio" class="form-control" @bind-Value="Partida.FechaInicio"> </InputDate>
						</div>
					</div>

					<div class="row">
						<div class="col-3">
							<label class="form-label mt-2" for="FechaFin"><strong> Fecha Fin: </strong></label>
							<InputDate id="FechaFin" class="form-control" @bind-Value="Partida.FechaFin" onblur ="@(async () => await ValidarFechaFin())"> </InputDate>
						</div>
					</div>

					@*Botones*@
					<div class="card-footer d-flex justify-content-end gap-2 mt-2 bg-light">
						<button type="submit" class="btn btn-primary bi bi-floppy"> Guardar Cambios </button>
						<button type="button" class="btn btn-danger bi bi-trash" @onclick = "MostrarModal"> Eliminar </button>
						<a href="/Partidas/Index" class="btn btn-secondary bi bi-arrow-left"> Regresar </a>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
}

else 
{
	<div class="text-center">
		<p> Cargando datos de la partida... </p>
	</div>
}

@if(mostrarModalEliminar)
{
	@*Modal*@
	<div class="modal d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5)">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header bg-info">
					<h5 class="modal-title mx-auto text-white"> <strong> Confirmar Eliminación  </strong></h5>
				</div>

				<div class="modal-body">
					<h6> <strong> Datos De La Partida </strong> </h6>
					<div> <strong> Partida Id: </strong> @Partida.PartidaId </div>
					<div> <strong> Jugador 1 Id: </strong> @Partida.Jugador1Id </div>
					<div> <strong> Jugador 2 Id: </strong>  @Partida.Jugador2Id </div>
					<div> <strong> Ganador Id: </strong> @Partida.GanadorId</div>
					<div> <strong> Estado Partida: </strong> @Partida.EstadoPartida</div>
					<div> <strong> Ganador Id: </strong> @Partida.GanadorId</div>
					<div> <strong> Turno Jugador: </strong> @Partida.TurnoJugadorId</div>
					<div> <strong> Fecha Inicio:  </strong> @Partida.FechaInicio</div>
					<div> <strong> Fecha Fin: </strong> @Partida.FechaFin</div>

					<div class="text-danger mt-3"> ¿Está seguro que desea eliminar este jugador? </div>
				</div>

				@*Botones en modal*@
				<div class="modal-footer">
					<button type="button" class="btn btn-danger bi bi-trash" @onclick="ConfirmarEliminacion"> Si, deseo eliminar </button>
					<button type="button" class="btn btn-secondary bi bi-arrow-left" @onclick="() => mostrarModalEliminar = false"> Regresar</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int PartidaId { get; set; }

	public Partidas? Partida { get; set; }

	public List<Jugadores> ListaJugadores = new List<Jugadores>();

	public bool estadoValido { get; set; } = true;

	public bool fechaFinValida { get; set; } = true;

	public bool puedePonerGanador { get; set; } = false;

	public bool mostrarModalEliminar { get; set; } = false;

	public async Task SePuedeGanar()
	{
		try
		{
			if (Partida != null)
			{
				if (!Partida.EstadoPartida.ToLower().Equals("finalizada"))
				{
					puedePonerGanador = false;
					return;
				}

				puedePonerGanador = true;
				StateHasChanged();
				await InvokeAsync(StateHasChanged);
			}
		}
		catch(Exception e)
		{
			Console.WriteLine($"Error: {e.Message}");
		}
	}

	public async Task EstadoEsValido()
	{
		try
		{
			var estadosValidos = new[] { "pendiente", "en progreso", "finalizada" };

			if (Partida != null)
			{
				if (!estadosValidos.Contains(Partida.EstadoPartida.ToLower()))
				{
					estadoValido = false;
					return;
				}

				estadoValido = true;
				StateHasChanged();
				await InvokeAsync(StateHasChanged);
			}
		}
		catch (Exception e)
		{
			Console.WriteLine($"Error: {e.Message}");
		}
	}

	private async Task ValidarFechaFin()
	{
		if (Partida != null)
		{
			if ((Partida.FechaFin.HasValue && Partida.FechaFin < Partida.FechaInicio))
			{
				fechaFinValida = false;
				return;
			}

			fechaFinValida = true;
			StateHasChanged();
			await InvokeAsync(StateHasChanged);
		}
	}

	public async Task MostrarModal ()
	{
		mostrarModalEliminar = true;
		StateHasChanged();
		await InvokeAsync(StateHasChanged);
	}

	protected override async Task OnInitializedAsync ()
	{
		Partida = await partidasService.Buscar(PartidaId);
		ListaJugadores = await jugadoresService.Listar(j => true);
	}

	public async Task ConfirmarEliminacion ()
	{
		if (Partida != null)
		{
			if (await partidasService.Eliminar(Partida.PartidaId))
			{
				navigationManager.NavigateTo("/Partidas/Index");
			}
		}
	}

	public async Task EditarPartida ()
	{
		await Task.Delay(1000);

		if (Partida != null)
		{
			if (estadoValido && fechaFinValida)
			{
				if (await partidasService.Guardar(Partida))
				{
					navigationManager.NavigateTo("/Partidas/Index");
				}
			}
		}
	}
}
