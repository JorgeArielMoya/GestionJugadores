@page "/Jugador/Edit/{JugadorId:int}"

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle> Editar Jugador </PageTitle>

@if (Jugador != null)
{
	@*Contenedor*@
	<div class="container mt-3"> 
		<div class="card shadow-sm">
			<div class="card-header text-center text-white bg-info ">
				<h5> <strong> Editar Jugador </strong> </h5>
			</div>

			<div class="card-body">
				<EditForm Model="Jugador" OnValidSubmit="GuardarCambios"> 
					<DataAnnotationsValidator />
					<div class="border rounded-3 p-4 mb-4 bg-light">
						<div class="row">
							<div class="col-md-6 mb-3">
								<label for="Nombres" class="form-label mt-1"> <strong> Nombres: </strong> </label>
								<InputText id="Nombres" class="form-control" @bind-Value="Jugador.Nombres" onblur="@(async () => await ValidarExistenciaNombre(Jugador.Nombres))"/>
								<ValidationMessage For="() => Jugador.Nombres"> </ValidationMessage>
							</div>
						</div>

						@if(existeNombre)
						{
							<div class="text-danger"> Este nombre ya se encuentra registrado </div>
						}

						<div class="row">
							<div class="col-md-6 mb-3">
								<label for="partidas" class="form-label mt-1"> <strong> Partidas: </strong> </label>
								<InputNumber id="partidas" class="form-control" @bind-Value="Jugador.Partidas" />
								<ValidationMessage For="() => Jugador.Partidas"> </ValidationMessage>
							</div>
						</div>

						@*Botones*@
						<div class="card-footer d-flex justify-content-end gap-2 mt-2 bg-light"> 
							<button type="submit" class="btn btn-primary bi bi-floppy"> Guardar Cambios </button>
							<button  type ="button" class="btn btn-danger bi bi-trash" @onclick = "MostrarModal"> Eliminar </button>
							<a href="/Jugador/Index" class="btn btn-secondary bi bi-arrow-left"> Regresar </a>
						</div>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
}

else
{
	<div class="text-center">
		<p> Cargando datos del jugador... </p>
	</div>
}

@if (mostrarModalEliminar)
{
	@*Modal*@
	<div class = "modal d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5)">
		<div class="modal-dialog"> 
			<div class="modal-content">
				<div class="modal-header bg-info">
					<h5 class="modal-title mx-auto text-white"> <strong> Confirmar Eliminación  </strong></h5>
				</div>

				<div class="modal-body">
					<h6> <strong> Datos Del Jugador </strong> </h6>
					<div> <strong> Jugador Id: </strong> @Jugador.JugadorId </div>
					<div> <strong> Nombre: </strong> @Jugador.Nombres </div>
					<div> <strong> Partidas: </strong> @Jugador.Partidas</div>
					<div class="text-danger mt-3"> ¿Está seguro que desea eliminar este jugador? </div>
				</div>

				@*Botones en modal*@
				<div class="modal-footer">
					<button type ="button"class="btn btn-danger bi bi-trash" @onclick = "ConfirmarEliminacion"> Si, deseo eliminar </button>
					<button type="button" class="btn btn-secondary bi bi-arrow-left" @onclick = "() => mostrarModalEliminar = false"> Regresar</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int JugadorId { get; set; }

	public Jugadores? Jugador { get; set; }

	private bool existeNombre { get; set; } = false;

	private bool mostrarModalEliminar { get; set; } = false;

	private string nombreOriginal { get; set; } = string.Empty;

	private async Task ValidarExistenciaNombre (string nombres)
	{
		if (string.IsNullOrEmpty(nombres))
		{
			existeNombre = false;
			return;
		}

		if (nombres.ToLower().Equals(nombreOriginal.ToLower()))
		{
			existeNombre = false;
			return;
		}
		existeNombre = await jugadoresService.ExisteNombres(nombres);
		StateHasChanged();
	}

	private async Task MostrarModal ()
	{
		mostrarModalEliminar = true;
		StateHasChanged();
		await InvokeAsync(StateHasChanged);
	}

	protected override async Task OnInitializedAsync ()
	{
		Jugador = await jugadoresService.Buscar(JugadorId);
		nombreOriginal = Jugador.Nombres;
	}

	private async Task GuardarCambios ()
	{
		await Task.Delay(1000);

		if (!existeNombre || nombreOriginal.ToLower().Equals(Jugador.Nombres.ToLower()))
		{
			if (Jugador != null)
			{
				if (await jugadoresService.Guardar(Jugador))
				{
					navigationManager.NavigateTo("/Jugador/Index");
				}
			}
		}
	}

	private async Task ConfirmarEliminacion ()
	{
		if (Jugador != null)
		{
			if (await jugadoresService.Eliminar(Jugador.JugadorId))
			{
				mostrarModalEliminar = false;
				navigationManager.NavigateTo("/Jugador/Index");
			}
		}
	}
}
