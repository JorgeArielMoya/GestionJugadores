@page "/Jugador/Create"

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle> Crear Nuevo Jugador </PageTitle>

@*Contenedor*@
<div class="container mt-3">
	<div class="card shadow-sm">
		<div class="card-header text-center text-white bg-info">
			<h5> <strong> Crear Nuevo Jugador </strong> </h5>
		</div>

		<div class="card-body"> 
			<EditForm Model= "Jugador" OnValidSubmit="GuardarJugador"> 
				<DataAnnotationsValidator />

				@*Inputs*@
				<div class="row"> 
					<div class="col-md-3 mb1"> 
						<label for="JugadorId"> <strong> JugadorId: </strong> </label>
						<InputNumber id="jugadorId" class="form-control" @bind-Value = "Jugador.JugadorId" disabled/> 
					</div>
				</div>

				<div class="row">
					<div class="col-md-6 mb-3">
						<label for ="Nombres" class = "form-label mt-1"> <strong> Nombres: </strong> </label>
						<InputText id="Nombres" class="form-control" @bind-Value="Jugador.Nombres" onblur="@(async () => await ValidarExistenciaNombre(Jugador.Nombres))" />
						<ValidationMessage For="() => Jugador.Nombres"> </ValidationMessage>
					</div>
				</div>

				@if(existeNombre)
				{
					<div class="text-danger"> Este nombre ya se encuentra registrado </div>		
				}

				<div class="row">
					<div class="col-md-6 mb-3">
						<label for="partidas" class="form-label mt-1"> <strong> Partidas: </strong> </label>
						<InputNumber id="partidas" class="form-control" @bind-Value="Jugador.Partidas" />
						<ValidationMessage For="() => Jugador.Partidas"> </ValidationMessage>
					</div>
				</div>

				@*Botones*@
				<div class="d-flex justify-content-end gap-2 mt-2"> 
					<button type="submit" class="btn btn-success bi bi-floppy"> Guardar </button>
					<a href="/Jugador/Index" class="btn btn-danger bi-arrow-left"> Regresar </a>
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code 
{
	public Jugadores Jugador { get; set; } = new();

	private bool existeNombre { get; set; } = false;

	private async Task ValidarExistenciaNombre (string nombres)
	{
		if (string.IsNullOrWhiteSpace(nombres))
		{
			existeNombre = false;
			return;
		}

		existeNombre = await jugadoresService.ExisteNombres(Jugador.Nombres);
		StateHasChanged();
		await InvokeAsync(StateHasChanged);
	}

	private async Task GuardarJugador ()
	{
		await Task.Delay(1000);

		if (!existeNombre)
		{
			if (await jugadoresService.Guardar(Jugador))
			{
				navigationManager.NavigateTo("/Jugador/Index");
			}
		}
	}
}
