@page "/Jugador/Create"

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle> Crear Nuevo Jugador </PageTitle>

<div class="container mt-3">
	<div class="card shadow-sm">
		<div class="card-header text-center">
			<h5> Crear Nuevo Jugador </h5>
		</div>
		<div class="card-body"> 
			<EditForm Model= "jugador" OnValidSubmit="GuardarJugador" FormName="CrearJugadorFrom"> 
				<DataAnnotationsValidator />
					<div class="row"> 
						<div class="col-md-3 mb1"> 
							<label for="jugadorId"> JugadorId: </label>
							<InputNumber id="jugadorId" class="form-control" @bind-Value = "jugador.JugadorId" disabled/> 
						</div>
					</div>

					<div class="row">
						<div class="col-md-6 mb-3">
							<label for ="Nombres" class = "form-label mt-1"> Nombres: </label>
							<InputText id="Nombres" class="form-control" @bind-Value = "jugador.Nombres" />
							<ValidationMessage For="() => jugador.Nombres"> </ValidationMessage>
						</div>
					</div>

					<div class="row">
						<div class="col-md-6 mb-3">
							<label for="partidas" class="form-label mt-1"> Partidas: </label>
							<InputNumber id="partidas" class="form-control" @bind-Value="jugador.Partidas" />
							<ValidationMessage For="() => jugador.Partidas"> </ValidationMessage>
						</div>
					</div>
					
					<div class="d-flex justify-content-end gap-2 mt-3"> 
						<button type="submit" class="btn btn-success bi bi-check-circle-fill"> Guardar </button>
						<a href="/Jugador/Index" class="btn btn-danger bi-arrow-left-circle-fill"> Cancelar </a>
					</div>
			</EditForm>
		</div>
	</div>
</div>

@code 
{
	public Jugadores jugador { get; set; } = new();

	private async Task GuardarJugador ()
	{
		if (await jugadoresService.Guardar(jugador))
		{
			navigationManager.NavigateTo("/Jugador/Index");
		}
	}
}
