@page "/Jugador/Index"

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle> Index de Jugadores </PageTitle>

@*Contenedor*@
<div class="container"> 
	<div class="card shadow-lg"> 
		<div class="card-header">
			<h5 class="card-title text-center"> <strong> Registro De Jugadores </strong> </h5>
			<div align = "right">
				<a href="/Jugador/Create" class="btn btn-primary bi bi-plus-square mt-3"> Crear </a>
			</div>
		</div>

		<div class="row align-items-center ms-1">
			<div class="col-12 col-md-3 mb-3">
				<label class="col-form-label"> <strong>Filtrar por </strong></label>
				<InputSelect class="form-select" @bind-value="Filtro">
					<option value="JugadorId"> JugadorId</option>
					<option value="Nombres"> Nombres</option>
				</InputSelect>
			</div>

			<div class="col-12 col-md-4 mb-3">
				<label class="col-form-label"> <strong>Búsqueda </strong></label>
				<div class="input-group">
					<input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
					<button class="btn btn-outline-primary bi bi-search" @onclick="Buscar"> Buscar </button>
				</div>
			</div>
		</div>

		<div class = "table-responsive">
			<table class="table table-hover table-bordered mt-3 text-center"> 
				<thead class="text-black bg-white">
					<tr class="border-bottom border-2 border-dark">
						<th> JugadorId</th>
						<th> Nombres </th>
						<th> Victorias </th>
						<th> Derrotas </th>
						<th> Empates </th>
						<th> Editar </th>
					</tr>
				</thead>

				@if (ListaJugadores.Count == 0)
				{
					<tr>
						<td colspan="5" class="text-center fs-5 py-4"> No se han encontrado jugadores  </td>
					</tr>
				}
				<tbody> 
					@foreach (var jugador in ListaJugadores)
					{
						<tr class="text-center border border-end">
							<td class="border"> @jugador.JugadorId </td>
							<td class="border"> @jugador.Nombres </td>
							<td class="border"> @jugador.Victorias.ToString() </td>
							<td class = "border"> @jugador.Derrotas.ToString() </td>
							<td class="border"> @jugador.Empates.ToString()</td>
							<td class="border">
								<a href="/Jugador/Edit/@jugador.JugadorId" class="btn btn-outline-primary bi bi-pencil-square"> </a>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>

	@*Footer*@
	<div class="card-footer space-between"> 
		<div class="row">
			<div class="col-12 col-md-3 mb-2">
				<label> <strong> Total jugadores: </strong> @ListaJugadores.Count()</label>
			</div>
			
			<div class="col-12 col-md-3 mb-2">
				<label> <strong> Total partidas: </strong> @ListaJugadores.Sum(j => j.Victorias + j.Derrotas + j.Empates)</label>
			</div>
		</div>
	</div>
</div>

@code 
{
	public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();

	public string Filtro { get; set; } = "JugadorId";

	public string ValorFiltro { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync ()
	{
		await CargarJugadores();
	}

	private async Task Buscar() 
	{
		await CargarJugadores();
	}

	private async Task CargarJugadores ()
	{
		try
		{
			var lista = await jugadoresService.Listar(j => true);

			if (!string.IsNullOrWhiteSpace(ValorFiltro))
			{
				if (Filtro == nameof(Jugadores.JugadorId) && int.TryParse(ValorFiltro, out int id))
				{
					lista = lista.Where(j => j.JugadorId == id).ToList();
				}

				else if (Filtro == nameof(Jugadores.Nombres))
				{
					lista = lista.Where(j => j.Nombres != null && j.Nombres.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
				}
			}
			ListaJugadores = lista;
		} 
		catch (Exception e)
		{
			Console.WriteLine($"Error: {e.Message}");
		}
	}
}
